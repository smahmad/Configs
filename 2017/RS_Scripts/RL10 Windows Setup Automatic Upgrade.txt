# ---
# RightScript Name: RL10 Windows Setup Automatic Upgrade
# Description: Subscribes to receive updates to the RightLink agent automatically.
#   Creates a cron job that performs a daily check to see if an upgrade to RightLink
#   is available and upgrades if there is.
# Inputs:
#   UPGRADES_FILE_LOCATION:
#     Input Type: single
#     Category: RightScale
#     Description: External location of 'upgrades' file
#     Default: text:https://rightlink.rightscale.com/rightlink/upgrades
#     Required: false
#     Advanced: true
#   ENABLE_AUTO_UPGRADE:
#     Input Type: single
#     Category: RightScale
#     Description: Enables or disables automatic upgrade of RightLink10.
#     Default: text:true
#     Required: false
#     Advanced: true
#     Possible Values:
#       - text:true
#       - text:false
# ...
#

# This script either creates or updates a scheduled job that will run once a day that checks to
# see if there is an upgrade for RightLink

if ([string]::IsNullOrEmpty($env:UPGRADES_FILE_LOCATION)) {
  $env:UPGRADES_FILE_LOCATION = 'https://rightlink.rightscale.com/rightlink/upgrades'
}

$execScript = "$env:ProgramFiles\RightScale\RightLink\automatic_upgrade.ps1"
$scheduledJob = SCHTASKS.exe /Query /TN 'rightlink_check_upgrade' 2> $null
if ($env:ENABLE_AUTO_UPGRADE -eq 'false') {
  if (Test-Path -Path $execScript) {
    Remove-Item -ErrorAction SilentlyContinue -Force $execScript
    SCHTASKS.exe /Delete /TN 'rightlink_check_upgrade' /F
    Write-Output 'Automatic upgrade disabled'
  } else {
    Write-Output 'Automatic upgrade never enabled - no action done'
  }
} else {
  $jobHour = Get-Random -Min 0 -Max 24
  $jobMinute = Get-Random -Min 0 -Max 60
  # Create time format of ##:## needed for SCHTASKS
  $jobStartTime = '{0:d2}:{1:d2}' -f $jobHour, $jobMinute
  Set-Content $execScript @"
# This script is autogenerated by RightScale. Do not edit.
# It is meant to be run from a scheduled task to subscribe to receive automatic
# updated for the RightLink agent.

function Log([string]`$logString)
{
    `$logFile = "`$env:ProgramFiles\Rightscale\RightLink\Logs\rightlink.log"
    Add-Content `$logFile "`$logString``n"
    Write-Host `$logString
}
`$rsc = "`$env:ProgramFiles\Rightscale\RightLink\rsc.exe"
`$rs = 'RL10 Windows Upgrade'
`$currentVersion = & `$rsc --retry 5 --timeout 10 --x1 .version rl10 index proc 2> `$null
if ([string]::IsNullOrEmpty(`$currentVersion)) {
 Log 'RightlinkUpgrader: Unable to get current version of rightlink executable'
 exit 1
}
# Fetch information about what we should become. The upgrades file consists of lines formatted
# as 'currentVersion:desiredVersion'. If the upgrades file does not exist,
# or if the current version is not in the file, no upgrade is done.
`$wc = New-Object System.Net.Webclient
`$file = '$env:UPGRADES_FILE_LOCATION'
`$desiredVersion = `$wc.DownloadString(`$file) -Split "``n" |
   Select-String "^\s*`$currentVersion\s*:\s*(\S+)\s*$" |
   % { `$_.Matches[0].Groups[1].Value }
if ([string]::IsNullOrEmpty(`$desiredVersion)) {
 Log "RightlinkUpgrader: No upgrades found for `$currentVersion in upgrade file `$file"
 exit 0
}
Log "RightlinkUpgrader: Upgrade found from `$currentVersion to `$desiredVersion"

& `$rsc --rl10 cm15 schedule_right_script /api/right_net/scheduler/schedule_right_script right_script="`$rs" arguments=UPGRADE_VERSION=`$desiredVersion
"@

  if ($scheduledJob) {
    Write-Output 'Updating scheduled job rightlink_check_upgrade'
    SCHTASKS.exe /CHANGE /RU 'SYSTEM' /TN 'rightlink_check_upgrade' /TR "Powershell.exe -ExecutionPolicy unrestricted -File '$execScript'"
  } else {
    SCHTASKS.exe /CREATE /RU 'SYSTEM' /TN 'rightlink_check_upgrade' /ST $jobStartTime /SC DAILY /TR "Powershell.exe -ExecutionPolicy unrestricted -File '$execScript'"
  }

    
  # Check to make sure that the job was scheduled
  $newScheduledJob = SCHTASKS.exe /Query /TN 'rightlink_check_upgrade' 2> $null
  if ($newScheduledJob) {
    Write-Output 'Automatic upgrade enabled.'
  } else {
    Write-Output 'The scheduled job failed to be created!'
    Exit 1
  }
}
