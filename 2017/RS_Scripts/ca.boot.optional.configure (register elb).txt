# Powershell 2.0

# Stop and fail script when a command fails.
$errorActionPreference = "Stop"
$region = $env:CA_DPL_REGION
$instanceID = $env:CA_GBL_INSTANCE_ID
$instanceName = $env:CA_GBL_INSTANCE_NAME
$blnClassicELB = $env:CA_SA_BOOL_CLASSIC_ELB
$caRSLibPath = $env:CA_GBL_RS_LIB_FILE_PATH
$TierName = $env:CA_SA_TIER_NAME
$installSSL = $env:CA_SA_BOOL_INSTALL_SSL

#Convert comma seperated strings to array
$arrElbOrTargetGroup = $env:CA_SA_ELB_OR_TARGET_GROUP_NAME.split(",")


if (($env:CA_SA_BOOL_REGISTER_WITH_ELB.ToLower() -ne "true")){
    "Skipping the register ELB script as flag is set not to join at launch"
    Exit 0
}

#If SSL cert is intalled then set port number to 443 which is used later to register instance with ELB or Target Group otherwise
#use port 80
$portNumber = if ($installSSL.ToLower() -ne "true"){80} else {443}

#boolean flag set to false if there is mismatch found
$blnMatched = $true
  
#In case of classic ELB, IAM policy should restrict registering an instance with wrong ELB
#If its a an ALB then Target Group policy doesn't allow adding resource name. In that case
#custom logic matches tier name and two digit year with the Target Group name
if ($blnClassicELB -ne "true"){
  #split parts of instance name which are separated by "."
  $arrInstanceName = $instanceName.Split(".")

  #extract year from first array element which contains environment followed by two digit year like prod17
  $year = $arrInstanceName[0].Substring($arrInstanceName[0].Length -2)
   
  $arrInstanceName[0]
  $arrInstanceName[0].length

  #Initialize prod and stage prefixes which are valid prefixes of target group
  $prodYear = "prod" + "$year"
  $stageYear = "stage" + "$year"

  #loop through the coma sperated ELB or Target Group name input parameter
  foreach ($targetGroup in $arrElbOrTargetGroup) {
    #Input contains Target Group ARN so further split it by "/"
    $arrTargetGroupName = $targetGroup.split("/")
    
    #second last element of array should contain the Target Group name 
    $targetGroupName = $arrTargetGroupName[$arrTargetGroupName.length-2]
    
    #Make sure target group naem starts with either prodyy, stageyy or first part of the instance name
    #For example, for year 2017, prod17 or stage17 are valid prefixes for Target Group. If instance name starts with "loadtest" then
    #exactly the same Target Group name prefix is also valid
    #Also make sure Target Group ends wth the name of the tier like app, logic, mobile-auth etc.
    "GropuName is $targetGroupName"
    "Prod year is $prodYear"
    "TierName is $tierName"
    
    if (($targetGroupName.ToLower().StartsWith($prodYear) -or $targetGroupName.ToLower().StartsWith($stageYear) -or $targetGroupName.ToLower().StartsWith($arrInstanceName[0])) -and ($targetGroupName.ToLower().EndsWith($tierName.ToLower()))){
      "Target Group name matched with instance and tier type."
    }else
    {
      $blnMatched = $false
      "Target Group Name $targetGroupName did not match with the tier type, year and/or environment"
    }
   }
}

#include the CA powershell library
. $caRSLibPath

#Register with target group if match is found or if its a classic ELB
if ($blnMatched){
  try{
    #Regeister instance with all ELBs
    RegisterWithELB $region $blnClassicELB $arrElbOrTargetGroup $instanceID $portNumber
  }catch{
    "An error occured: $_"
    exit 1
  }
}
else{
   "An error occured."
    exit 1
}